import{_ as s,o as i,c as a,V as n}from"./chunks/framework.vw966T_F.js";const t="/assets/1645953759125.tINh1A3C.png",e="/assets/1645953939304.ujDh85uV.png",p="/assets/1645972456212.rHzLQGu1.jpg",_=JSON.parse('{"title":"OAuth2 应用实践：Directus集成钉钉登录的尝试","description":"","frontmatter":{"title":"OAuth2 应用实践：Directus集成钉钉登录的尝试","subtitle":"Unable to add Dingtalk OAuth Login into Directus","date":"2022-02-27T00:00:00.000Z","author":"awis.me","header-img":"img/leaf.jpg","tags":["Open Source","GitHub","钉钉","OAuth","Directus"]},"headers":[],"relativePath":"posts/2022-02-27-oauth-directus-dingtalk.md","filePath":"posts/2022-02-27-oauth-directus-dingtalk.md"}'),l={name:"posts/2022-02-27-oauth-directus-dingtalk.md"},h=n(`<h2 id="_1-项目简介" tabindex="-1">1. 项目简介 <a class="header-anchor" href="#_1-项目简介" aria-label="Permalink to &quot;1. 项目简介&quot;">​</a></h2><p>这个小项目预期结果是让 Directus 支持使用钉钉账号来登录。 在了解OAuth2协议后(参见上一篇blog，参考资料1），已经有足够知识储备来实施。 Directus 原生支持使用GitHub登录， 所以，解决思路是先从GitHub入手。按下面步骤进行：</p><ul><li>配置Directus使用GitHub账号登录，熟悉Directus对OAuth的标准支持功能</li><li>配置Directus使用钉钉账号登录，由于钉钉的协议实现和RFC6749/GitHub有不同，这里有可能需要见招拆招</li><li>上线Directus到服务器环境，在钉钉的PC版和手机版验证</li></ul><h2 id="_2-环境配置" tabindex="-1">2. 环境配置 <a class="header-anchor" href="#_2-环境配置" aria-label="Permalink to &quot;2. 环境配置&quot;">​</a></h2><p>在本地用ngrok暴漏出一个服务，来接受OAuth服务器的redirect。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ngrok</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8055</span></span></code></pre></div><p>得到 <a href="https://445a-240e-47c-30b0-3b10-600e-ea25-cde5-2334.ngrok.io/" target="_blank" rel="noreferrer">https://445a-240e-47c-30b0-3b10-600e-ea25-cde5-2334.ngrok.io/</a> 作为外网域名来访问本机8055端口的directus。</p><h2 id="_3-directus-使用-github账号登录" tabindex="-1">3. Directus 使用 GitHub账号登录 <a class="header-anchor" href="#_3-directus-使用-github账号登录" aria-label="Permalink to &quot;3. Directus 使用 GitHub账号登录&quot;">​</a></h2><p>按参考资料2中配置参数。以下配置中，对每一个新的GitHub授权用户，Directus在登录过程中会使用用户email自动创建一个Directus用户，并且将其角色赋值为AUTH_GITHUB_DEFAULT_ROLE_ID。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>AUTH_PROVIDERS=&quot;github&quot;</span></span>
<span class="line"><span>AUTH_GITHUB_DRIVER=&quot;oauth2&quot;</span></span>
<span class="line"><span>AUTH_GITHUB_CLIENT_ID=&quot;7e....ae&quot;</span></span>
<span class="line"><span>AUTH_GITHUB_CLIENT_SECRET=&quot;d5.......d9&quot;</span></span>
<span class="line"><span>AUTH_GITHUB_AUTHORIZE_URL=&quot;https://github.com/login/oauth/authorize&quot;</span></span>
<span class="line"><span>AUTH_GITHUB_ACCESS_URL=&quot;https://github.com/login/oauth/access_token&quot;</span></span>
<span class="line"><span>AUTH_GITHUB_PROFILE_URL=&quot;https://api.github.com/user&quot;</span></span>
<span class="line"><span>AUTH_GITHUB_ALLOW_PUBLIC_REGISTRATION=&quot;true&quot;</span></span>
<span class="line"><span>AUTH_GITHUB_DEFAULT_ROLE_ID=&quot;0f5f1b5a-106f-4ec7-a8b8-6f11482a060f&quot;</span></span>
<span class="line"><span>AUTH_GITHUB_ICON=&quot;github&quot;</span></span>
<span class="line"><span># AUTH_GITHUB_EMAIL_KEY=&quot;email&quot;</span></span>
<span class="line"><span># AUTH_GITHUB_IDENTIFIER_KEY=&quot;email&quot;</span></span></code></pre></div><p>重启Directus让配置生效后，可以看到登录界面的GitHub选项。 <img src="`+t+'" alt="picture 1"></p><p>选择授权后，成功登录Directus。 检查Directus中新生成的用户和权限正常。 <img src="'+e+`" alt="picture 2"></p><h2 id="_4-directus-使用钉钉账号登录的尝试" tabindex="-1">4. Directus 使用钉钉账号登录的尝试 <a class="header-anchor" href="#_4-directus-使用钉钉账号登录的尝试" aria-label="Permalink to &quot;4. Directus 使用钉钉账号登录的尝试&quot;">​</a></h2><p>先照猫画虎配置下。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>AUTH_PROVIDERS=&quot;github, dingtalk&quot;</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>AUTH_DINGTALK_DRIVER=&quot;oauth2&quot;</span></span>
<span class="line"><span>AUTH_DINGTALK_CLIENT_ID=&quot;ding...txt&quot;</span></span>
<span class="line"><span>AUTH_DINGTALK_CLIENT_SECRET=&quot;c6rCT...h4ohKlq5oz&quot;</span></span>
<span class="line"><span>AUTH_DINGTALK_AUTHORIZE_URL=&quot;https://login.dingtalk.com/oauth2/auth&quot;</span></span>
<span class="line"><span>AUTH_DINGTALK_ACCESS_URL=&quot;https://api.dingtalk.com/v1.0/oauth2/userAccessToken&quot;</span></span>
<span class="line"><span>AUTH_DINGTALK_PROFILE_URL=&quot;https://api.dingtalk.com/v1.0/contact/users/me&quot;</span></span>
<span class="line"><span>AUTH_DINGTALK_ALLOW_PUBLIC_REGISTRATION=&quot;true&quot;</span></span>
<span class="line"><span>AUTH_DINGTALK_DEFAULT_ROLE_ID=&quot;0f5f1b5a-106f-4ec7-a8b8-6f11482a060f&quot;</span></span>
<span class="line"><span>AUTH_DINGTALK_ICON=&quot;alipay&quot;</span></span>
<span class="line"><span>#AUTH_DINGTALK_EMAIL_KEY=&quot;email&quot;</span></span>
<span class="line"><span>#AUTH_DINGTALK_IDENTIFIER_KEY=&quot;email&quot;</span></span></code></pre></div><p><img src="`+p+`" alt="picture 3"></p><p>点击Log In with Dingtalk可以正常授权， 但授权后被redirect到了</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>/admin/login?reason=INVALID_USER</span></span></code></pre></div><p>怀疑是钉钉重定向回来的链接没有code参数（参见上一篇协议解析，钉钉是用的authCode参数），第一时间先在社区开个<a href="https://github.com/directus/directus/discussions/11879" target="_blank" rel="noreferrer">issue</a>看看有没有其他人碰到过。</p><p>同时，对oauth2的driver做了一个临时补丁， 当有authCode时候， 就把authCode赋值给code。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clearCookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`oauth2.\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">providerName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ( req.query.authCode) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            req.query.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.query.authCode</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req.query.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req.query.state) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">warn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`[OAuth2] Couldn&#39;t extract OAuth2 code or state from query: \${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">query</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        authResponse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> authenticationService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">login</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(providerName, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            code: req.query.code,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            codeVerifier: verifier,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            state: req.query.state,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ...</span></span></code></pre></div><p>再次重启directus后， 补丁似乎生效了， 这次被重定向到了。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>/admin/login?reason=SERVICE_UNAVAILABLE</span></span></code></pre></div><p>OAuth2协议的第一步获取code已经通过了。 SERVICE_UNAVAILABLE 是获取token出问题，还是取profile出问题了？</p><p>注意到钉钉获取token的请求中，参数名称是clientId，clientSecret。 而GitHub是client_id,client_secret. 另外钉钉还需要一个额外的grantType.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;clientId&quot; : &quot;ding your id&quot;,</span></span>
<span class="line"><span>  &quot;clientSecret&quot; : &quot;your secret&quot;,</span></span>
<span class="line"><span>  &quot;code&quot; : &quot;6b427e8bfab83e93bedd13f16a430702&quot;,</span></span>
<span class="line"><span>  &quot;grantType&quot; : &quot;authorization_code&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>把clientId，clientSecret和grantType作为参数配置到directus请求中。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>AUTH_DINGTALK_PARAMS=&quot;{\\&quot;clientId\\&quot;: \\&quot;din...txt\\&quot;,\\&quot;clientSecret\\&quot;: \\&quot;d56....58bd9\\&quot;,\\&quot;grantType\\&quot;: \\&quot;authorization_code\\&quot;}&quot;</span></span></code></pre></div><p>仍然是SERVICE_UNAVAILABLE。 检查driver，发现问题出在下面：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        tokenSet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">oauthCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.redirectUrl,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            { code: payload.code, state: payload.state },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            { code_verifier: payload.codeVerifier, state: generators.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">codeChallenge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(payload.codeVerifier) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        userInfo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">userinfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tokenSet.access_token</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><p>上面代码抛出异常了，原因是HTTP请求得到的响应是400. 应该是钉钉OAuth服务器不识别Directus发过去的消息。</p><p>上面代码执行背景是：</p><ul><li>在oauth2 driver中，配置了express路由处理钉钉redirect过来的code，在处理过程中，需要认证用户（认证成功会完成登录，发放JWT token）；</li><li>用户认证和driver无关，用一个通用的AuthenticationService.login服务处理， 在服务中，又调用driver的getUserID方法来获取userId；</li><li>对于oauth2 driver来说，网页上没传过来用户名密码，其唯一输入就是钉钉redirect过来的code，需要通过OAuth接口，把code转换成token，然后读取用户信息，才能知道userID。</li></ul><p>OAuth2 Driver使用了<a href="https://github.com/panva/node-openid-client" target="_blank" rel="noreferrer">openid-client</a> 和服务器通信。其client也在driver中初始化：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> issuer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Issuer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        authorization_endpoint: authorizeUrl,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        token_endpoint: accessUrl,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        userinfo_endpoint: profileUrl,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        issuer: additionalConfig.provider,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> issuer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Client</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        client_id: clientId,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        client_secret: clientSecret,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        redirect_uris: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.redirectUrl],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        response_types: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;code&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span></code></pre></div><p>所以问题细化成了 <a href="https://github.com/panva/node-openid-client" target="_blank" rel="noreferrer">openid-client</a> 和钉钉的兼容性。再具体一些，是如何用<a href="https://github.com/panva/node-openid-client/tree/main/docs" target="_blank" rel="noreferrer">oauthCallback函数</a>来从钉钉处获取token。</p><p>看了下openid-client的实现，其和OAuth服务器交互时候，POST的表单数据是按照RFC6749中定义的参数名称硬编码的。 必然和钉钉的要求不匹配。 使用openid-client没有办法兼容钉钉。 将调研结果和directus OAuth Driver的作者在<a href="http://github.com/directus/directus/discussions/11881" target="_blank" rel="noreferrer">Integrating Dingtalk as OAuth2 server</a> 做了详细的探讨。</p><h2 id="_5-结论" tabindex="-1">5. 结论 <a class="header-anchor" href="#_5-结论" aria-label="Permalink to &quot;5. 结论&quot;">​</a></h2><p>原定计划无法达成。 原因是钉钉的OAuth实现和标准不兼容。而Directus使用了第三方的OAuth库来和OAuth服务器通信。 基于标准的openid-client和说方言的钉钉OAuth服务器无法沟通。</p><p>考虑两种方案：</p><ol><li>从directus标准oauth2 driver中继承，实现一个钉钉方言版本的oauth2-dingtalk driver， 或者</li><li>实现一个proxy，来做钉钉的OAuth方言和标准OAuth2协议的翻译</li></ol><p>倾向于方案2， 相当于给钉钉做一个协议封装层，按照标准转换下参数格式。这样后续有其他系统需要集成钉钉登录，也可以用的上。</p><p>后续完成后再补记。</p><h2 id="_6-补记" tabindex="-1">6. 补记 <a class="header-anchor" href="#_6-补记" aria-label="Permalink to &quot;6. 补记&quot;">​</a></h2><p>参考<a href="https://github.com/xu4wang/apiproxy" target="_blank" rel="noreferrer">apiproxy</a> 使用上述方案2实现了钉钉免密登录。</p><h2 id="_7-参考资料" tabindex="-1">7. 参考资料 <a class="header-anchor" href="#_7-参考资料" aria-label="Permalink to &quot;7. 参考资料&quot;">​</a></h2><ul><li><a href="https://awis.me/2022/02/26/oauth/" target="_blank" rel="noreferrer">OAuth2 Protocol Illustrated</a></li><li><a href="https://docs.directus.io/configuration/config-options/#authentication" target="_blank" rel="noreferrer">Directus Authentication Configuration</a></li><li><a href="https://github.com/panva/node-openid-client" target="_blank" rel="noreferrer">node openid client</a></li><li><a href="https://www.npmjs.com/package/@alicloud/dingtalk" target="_blank" rel="noreferrer">钉钉Nodejs SDK</a></li><li><a href="https://open.dingtalk.com/document/orgapp-server/obtain-user-token" target="_blank" rel="noreferrer">钉钉开放平台开发文档中获得token的示例 </a></li><li><a href="http://github.com/directus/directus/discussions/11881" target="_blank" rel="noreferrer">Integrating Dingtalk as OAuth2 server</a></li><li><a href="https://github.com/xu4wang/apiproxy" target="_blank" rel="noreferrer">apiproxy</a></li></ul>`,47),r=[h];function k(o,c,d,u,E,g){return i(),a("div",null,r)}const A=s(l,[["render",k]]);export{_ as __pageData,A as default};
