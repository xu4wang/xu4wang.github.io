import{_ as e,o as t,c as a,V as r}from"./chunks/framework.vw966T_F.js";const o="/assets/1649018609268.bEuiCsmY.jpg",i="/assets/1648895878714.hdUo3e3V.jpg",s="/assets/1648896198644.GmglhLO_.jpg",l="/assets/1648896909584.qS5bK7cc.jpg",p="/assets/1648896785068.DBi63KQa.jpg",h="/assets/1648751079155.0pxHxNXJ.jpg",q=JSON.parse('{"title":"以太坊图解","description":"","frontmatter":{"title":"以太坊图解","subtitle":"ethereum illustrated","date":"2022-04-04T00:00:00.000Z","author":"awis.me","header-img":"img/ethereum.jpg","tags":["blockchain","ethereum"]},"headers":[],"relativePath":"posts/2022-04-04-ethereum.md","filePath":"posts/2022-04-04-ethereum.md"}'),n={name:"posts/2022-04-04-ethereum.md"},c=r('<p>以太坊（Ethereum）是一个分布式的计算机，由大量分布式节点组成，其中的每一个节点，都可以执行字节码（也就是所谓智能合约），然后把结果存在区块链上。整个网络是分布式的，应用可以保存状态信息，应用有了状态信息，就可以根据状态提供丰富多彩的服务。以太坊没有中心化的节点，第三方不能干预整个网络的运行，可以看作是永不停机的世界计算机。</p><h2 id="_1-以太坊-世界计算机" tabindex="-1">1. 以太坊-世界计算机 <a class="header-anchor" href="#_1-以太坊-世界计算机" aria-label="Permalink to &quot;1. 以太坊-世界计算机&quot;">​</a></h2><p><img src="'+o+'" alt="picture 35"></p><p>上图描述了以太坊的功能。 它把一台虚拟计算机放到了区块链上。 图中彩色方块是用哈希值串联起来的区块，每一个区块中有交易列表，交易在计算机中执行，并且导致计算机状态的变化。</p><p>以太坊中把这个虚拟计算机的状态叫做“世界状态”， 世界状态可以看作“世界计算机”的存储区域。 世界状态通过执行以太坊区块中的交易来不断变化。每一个区块添加到链的尾部，都会导致世界的状态发生变化。世界状态由各个节点独立在数据库中维护。</p><blockquote><ol><li>从这个视角看，这种状态管理的方式，类似git，每一个区块都是一个新的版本。每一个区块都可以得到一个当前所有账户的状态。 最后一个区块，就是当前系统中所有账户的当前状态。</li><li>世界计算机在以太坊的每一个节点上运行，每一个节点上的世界状态都一样。 交易触发的代码会在所有节点的虚拟机上运行一遍。</li></ol></blockquote><h2 id="_2-账户" tabindex="-1">2. 账户 <a class="header-anchor" href="#_2-账户" aria-label="Permalink to &quot;2. 账户&quot;">​</a></h2><p><img src="'+i+'" alt="picture 27"></p><p>世界状态由所有账户的状态构成。 有两种账户，分别是外部账户和合约账户。账户的属性包括，余额（balance）、交易次数（nonce），code(代码)、存储(stroge)。 code和 storage只有合约账户有。外部账户用私钥控制，合约账户由合约代码控制。</p><blockquote><p>每一个内部账户都有自己独立的storage区域。以太坊中的智能合约代码，一旦部署，是无法升级修改的。codeHash确保代码不会被修改。</p></blockquote><p>上图中只画了两个账户，实际的世界状态中有很多账户。</p><h2 id="_3-交易" tabindex="-1">3. 交易 <a class="header-anchor" href="#_3-交易" aria-label="Permalink to &quot;3. 交易&quot;">​</a></h2><p>以太坊的交易由网络用户发起，交易有两种，一种是普通消息调用，另外一种是创建内部账户（会生成一个新的地址，初始化智能合约）。</p><p><img src="'+s+'" alt="picture 28"></p><p>上图展示了交易执行后， 世界状态中多了一个内部账户。</p><h2 id="_4-evm-虚拟机" tabindex="-1">4. EVM 虚拟机 <a class="header-anchor" href="#_4-evm-虚拟机" aria-label="Permalink to &quot;4. EVM 虚拟机&quot;">​</a></h2><p><img src="'+l+'" alt="picture 30"></p><p>作为世界计算机， 不仅仅有存储， 还有执行智能合约代码的虚拟机。称之为EVM。合约代码在EVM中执行，可以导致存储（世界状态）的变化。</p><blockquote><p>智能合约开发使用高级语言，在部署到以太坊上时候，会编译成EVM可以识别的二进制串。合约一旦部署，就需要在所有维护世界状态的节点执行。注意不是在一个节点执行，而是一旦交易列表中有合约相关操作，则操作对应的代码要在所有节点执行，以太坊节点通过执行合约相关代码来更新世界状态。</p></blockquote><p>对世界计算机的使用是收费的，每次执行需要预付费（术语叫gas），执行过程中不断扣减费用。扣完了预付费后，指令将不能再执行，智能合约的调用失败。 这种机制也增进了系统的可靠性。 如果智能合约中出了bug，写了一个死循环，至少还能欠费停下来。</p><h2 id="_5-访问以太坊" tabindex="-1">5. 访问以太坊 <a class="header-anchor" href="#_5-访问以太坊" aria-label="Permalink to &quot;5. 访问以太坊&quot;">​</a></h2><p><img src="'+p+'" alt="picture 29"></p><p>外部用户通过以太坊节点，使用web3 API访问以太坊。</p><h2 id="_6-数据结构" tabindex="-1">6. 数据结构 <a class="header-anchor" href="#_6-数据结构" aria-label="Permalink to &quot;6. 数据结构&quot;">​</a></h2><p><img src="'+h+'" alt="picture 21"></p><p>上图展示了以太坊的主要数据结构。最左侧是一个以太坊的区块，包括区块头和区块体。在区块头里面除了parentHash作为区块指针外，还有几个哈希值：</p><ol><li>stateRoot：其值是这个区块内所有交易执行后世界状态的哈希值。</li><li>receiptsRoot：其值是这个区块所有交易的执行结果的哈希值。</li><li>transactionRoot：其值是这个区块所有交易的哈希值。</li><li>ommersHash（UncleHash）： 是对区块体中的叔块列表的哈希。</li></ol><p>区块体中存放交易列表和叔块列表。</p><p>右侧的几棵merkle tree（世界状态，交易状态， 交易等），不会在区块中存储，而是会在节点的数据库中保存。 用区块中的哈希值来保证各个节点的merkle tree状态都一致。</p><h2 id="_7-参考资料" tabindex="-1">7. 参考资料 <a class="header-anchor" href="#_7-参考资料" aria-label="Permalink to &quot;7. 参考资料&quot;">​</a></h2><ol><li><a href="https://hackernoon.com/getting-deep-into-ethereum-how-data-is-stored-in-ethereum-e3f669d96033" target="_blank" rel="noreferrer">getting-deep-into-ethereum-how-data-is-stored-in-ethereum</a></li><li><a href="https://github.com/wanshan1024/ethereum_yellowpaper/blob/master/ethereum_yellow_paper_cn.pdf" target="_blank" rel="noreferrer">以太坊黄皮书</a></li><li><a href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6#%E5%8C%BA%E5%9D%97%E9%93%BE%E5%92%8C%E6%8C%96%E7%9F%BF" target="_blank" rel="noreferrer">以太坊白皮书</a></li><li><a href="https://github.com/MetaMask/IPFS-Ethereum-Hackathon/tree/master/slides/01_DanFinlay_intro_to_ethereum_blockchains" target="_blank" rel="noreferrer">DanFinlay-intro_to_ethereum</a></li></ol>',31),_=[c];function m(u,d,b,g,k,E){return t(),a("div",null,_)}const A=e(n,[["render",m]]);export{q as __pageData,A as default};
