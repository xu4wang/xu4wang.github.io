import { _ as _export_sfc, o as openBlock, c as createElementBlock, V as createStaticVNode } from "./chunks/framework.XmXKRmb4.js";
const _imports_0 = "/assets/1645717285742.fQXtkLb8.jpg";
const __pageData = JSON.parse('{"title":"在项目中引入细分领域的开源软件","description":"","frontmatter":{"title":"在项目中引入细分领域的开源软件","subtitle":"How to introduce an open source software into your project","date":"2022-02-25T00:00:00.000Z","author":"awis.me","header-img":"img/boat.jpg","tags":["Open Source","Directus"]},"headers":[],"relativePath":"posts/2022-02-25-how-to-learn-a-foss.md","filePath":"posts/2022-02-25-how-to-learn-a-foss.md"}');
const _sfc_main = { name: "posts/2022-02-25-how-to-learn-a-foss.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="_1-引言" tabindex="-1">1. 引言 <a class="header-anchor" href="#_1-引言" aria-label="Permalink to &quot;1. 引言&quot;">​</a></h2><p>开源软件已是信息社会的基石。</p><p>GitHub上软件种类众多，市场定位和成熟度也各不相同。</p><p>对于成熟的通用软件，例如Linux，NGINX等。将这类软件引入自研项目中不存在太多顾虑，因为通用所以用的人多。可以找到大量的成功案例，众多的开发维护人员。一旦碰到问题，也容易在网上搜到答案。</p><p>但还有一类开源软件， 定位相对没有那么通用，虽然其在细分领域已经做的比较好了，但由于生态环境较小，在项目中引入时候，还是有很多因素需要考虑：</p><ul><li>现有的开发人员有能力掌握并承接后续开发吗？</li><li>如果使用中出现问题， 有没有合适的开发人员去解决？或者去做二次开发？</li><li>系统上线后，有没有合适的人员去长期维护？</li></ul><p>对这类软件，在引入到项目中前，有两种办法增强信心：</p><ul><li>找到合适的人</li><li>成为该软件开源社区的一员</li></ul><h2 id="_2-找到专家" tabindex="-1">2. 找到专家 <a class="header-anchor" href="#_2-找到专家" aria-label="Permalink to &quot;2. 找到专家&quot;">​</a></h2><p>有如下几个方法。</p><ol><li>在软件的开发者中搜索是否有中国开发者，尝试建立联系。</li><li>百度该软件相关的讨论区，QQ群等。 加入并倾听，识别出专家。</li><li>寻找并参加该软件相关的培训。</li><li>寻找GitHub上该软件的相关软件。 例如引用该软件的软件，该软件的Plugin等等。并合作者建立联系。</li></ol><p>以上的目的都是在现实世界建立起和专家的联系。 然后通过和专家的电话，邮件，吃饭喝茶等各种交流来进一步了解该软件在国内的生态情况，以及软件的优缺点。 为后续引入打好基础。 和专家建立起联系后， 后续也方便和专家进一步在项目上合作共赢。</p><h2 id="_3-融入开源社区" tabindex="-1">3. 融入开源社区 <a class="header-anchor" href="#_3-融入开源社区" aria-label="Permalink to &quot;3. 融入开源社区&quot;">​</a></h2><p>如果国内找不到专家。 就只能撸胳膊上，让自己成为专家了。</p><h3 id="_3-1-学习使用" tabindex="-1">3.1. 学习使用 <a class="header-anchor" href="#_3-1-学习使用" aria-label="Permalink to &quot;3.1. 学习使用&quot;">​</a></h3><p>主要看如下几方面的内容：</p><ul><li>软件自身的官方文档</li><li>Youtube上的介绍视频，以及第三方教程</li><li>软件的单元测试</li></ul><p>以上，结合大粒度的源码分析，可以掌握软件的大体脉络。</p><h3 id="_3-2-和同行讨论" tabindex="-1">3.2. 和同行讨论 <a class="header-anchor" href="#_3-2-和同行讨论" aria-label="Permalink to &quot;3.2. 和同行讨论&quot;">​</a></h3><p>一般开源软件社区有如下几个地方。</p><ul><li>GitHub项目Issues</li><li>GitHub项目Discussions</li><li>Discord或者Slack等讨论组</li><li>Email邮件组</li></ul><p>通过加入并查看大家在讨论哪些问题，能了解到软件的一些使用细节和适用场景。 在学习的同时，也要多思考，多提问题， 多回答社区的问题。</p><p>回答社区的问题可以针对和自己项目相关的领域问题，积极回答问题有两点好处：</p><ul><li>驱动自己认真深入思考，如果我在项目中碰到这个问题，该怎么处理？</li><li>和其它社区用户，以及软件开发维护者们建立联系</li></ul><p><img src="' + _imports_0 + '" alt="picture 1"></p><p>以上是 <a href="https://github.com/directus/directus/discussions" target="_blank" rel="noreferrer">Headless CMS Directus</a> 的项目讨论社区。 我最近在调研用Directus来做API中间件，watch了该项目的讨论区，GitHub会把所有讨论实时发到我一个特定的邮箱里面。 通过查看大家的讨论，有很多收获。我也把自己学到的经验总结提炼出来帮助其它用户， “Most Helpful”榜单排名第5的就是我。</p><h3 id="_3-3-小规模mvp验证" tabindex="-1">3.3. 小规模MVP验证 <a class="header-anchor" href="#_3-3-小规模mvp验证" aria-label="Permalink to &quot;3.3. 小规模MVP验证&quot;">​</a></h3><p>在看的基础上，也需要动手做。</p><p>按照自己项目的特点，定义一个和该软件相关的最小MVP流程，尝试引入该开源软件实现。 以上三点，相辅相成，可以同步进行。 理想的结果是：</p><ul><li>自己变成了专家，后续在项目中引入</li><li>研究过程中发现软件不适用，果断放弃</li></ul>', 30);
const _hoisted_31 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_31);
}
const _20220225HowToLearnAFoss = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _20220225HowToLearnAFoss as default
};
