import{_ as s,o as i,c as a,V as t}from"./chunks/framework.vw966T_F.js";const n="/assets/1646056955927.KT__GC9R.jpg",e="/assets/1645815529546.i1_0mDQm.jpg",y=JSON.parse('{"title":"OAuth2 协议解析：以GitHub和钉钉为例","description":"","frontmatter":{"title":"OAuth2 协议解析：以GitHub和钉钉为例","subtitle":"OAuth2 Protocol Illustrated: GitHub and Dingtalk","date":"2022-02-26T00:00:00.000Z","author":"awis.me","header-img":"img/grass.jpg","tags":["Open Source","GitHub","OAuth","钉钉"]},"headers":[],"relativePath":"posts/2022-02-26-oauth.md","filePath":"posts/2022-02-26-oauth.md"}'),p={name:"posts/2022-02-26-oauth.md"},l=t('<h2 id="_1-原理" tabindex="-1">1. 原理 <a class="header-anchor" href="#_1-原理" aria-label="Permalink to &quot;1. 原理&quot;">​</a></h2><p>假设有一个APP，要我使用GitHub授权登录。 在这个登录场景中：</p><p>我作为数据的所有者告诉系统（GitHub），同意授权第三方应用（App）进入系统，获取某些数据（我的ID，头像等）。系统从而产生一个短期的进入令牌（token），用来代替密码，供第三方应用（APP）访问数据使用。</p><p>token是短期有效的，我可以随时通过GitHub把这个Token注销，从而使得APP不再能访问我的ID/头像等信息。</p><p>这里面有四个角色：用户，应用，系统，资源。</p><p>用户是资源所有者，应用是资源的使用者，系统是资源管理者。 现实生活中， 应用和系统各自有一个实例， 用户有多个实例。 应用和系统之间通过OAuth2协议通信。 用户在通信过程中参与（授权）。</p><p><img src="'+n+`" alt="picture 4"></p><p>把上面时序图对应到一个生活中的场景，业主授权快递公司出入小区送快递：</p><ol><li>Client Req Auth： <ul><li>顺丰快递员打电话给业主，有你的快递，得送进去，给办个出入证吧</li></ul></li><li>Resource Owner Grant Auth： <ul><li>业主联系小区物业， 我是业主，这是我的证明，我允许顺丰最近两天可以进小区物业给我送快递</li><li>小区物业告诉业主，OK，你让顺丰联系我拿临时出入证，就说3号楼201房间，授权码：核酸检测利国利民</li></ul></li><li>Client Sends Auth Grant <ul><li>快递公司联系小区物业说，我是顺丰，这是我的证明，需要给3号楼201房间送快递，业主的授权码是核酸检测利国利民</li></ul></li><li>Auth Server Sends Access Token <ul><li>小区物业说好，授权码没问题，这个是临时出入证，两天有效。</li></ul></li><li>Clients Sends Access Token <ul><li>快递员用临时出入证开小区大门</li></ul></li><li>Protected Resoure sends resource <ul><li>快递员进入小区</li></ul></li></ol><blockquote><p>注意：</p><ul><li>第二步，业主联系物业时候， 要证明自己的确是业主（用小区app登录）</li><li>第三步，顺丰联系物业时候，需要证明自己的确是顺丰（报小区物业预先给顺丰分配的client_secret让物业核对). 物业还要检查3号楼201业主的确允许了（通过查授权码）。</li></ul><p>如果快递员直接到小区门卫那里说 “核酸检测利国利民”，是没有作用的。“核酸检测利国利民”承载的信息是3号楼201业主允许顺丰在2天内进小区。 快递员给门卫报这个授权码没用，门卫只认出入证。再说，门卫也不知道快递员是不是顺丰的啊。这个授权码只有在快递公司把它换成临时出入证后才可以进小区。 换临时出入证需要验证顺丰的身份。“核酸检测利国利民”承载的信息是可以公开的，其它人听到了也不会有安全风险，因为其他人没有顺丰在物业处注册得到的client_secret, 没办法用授权码换临时出入证。 临时出入证需要妥善保管，任何人拿着都能进小区了。</p></blockquote><p>OAuth2的过程是当有快递时候，业主授权小区物业给快递公司分配临时出入证，在一定的时间内可以出入小区。在同一时间，会存在很多个不同业主授权的有效临时出入证，但一个业主对一家快递公司，在同一时间只有一个有效临时出入证。 角色间的类比关系如下。</p><table><thead><tr><th>中文术语</th><th>时序图中的概念</th><th>GitHub授权登录APP场景</th><th>业主授权顺丰进小区场景</th></tr></thead><tbody><tr><td>用户</td><td>Resource Owner</td><td>GitHub用户</td><td>业主</td></tr><tr><td>应用</td><td>Client</td><td>GitHub OAuth APP</td><td>顺丰</td></tr><tr><td>系统</td><td>Authorization Server</td><td>GitHub</td><td>小区物业</td></tr><tr><td>资源</td><td>Protected Resource</td><td>GitHub用户名称，头像</td><td>小区内部道路</td></tr><tr><td>授权</td><td>Authorization Grant</td><td>code</td><td>核酸检测利国利民</td></tr><tr><td>令牌</td><td>Access Token</td><td>token</td><td>临时出入证</td></tr></tbody></table><p>下图出自RFC6750， 实际实现时候，Client是APP， Auth Server/Resource Server在同一个域名后面（GitHub，钉钉，Facebook...)， Resource Owner也是在这个域名下完成授权（Auth Grant）。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>     +--------+                               +---------------+</span></span>
<span class="line"><span>     |        |--(A)- Authorization Request -&gt;|   Resource    |</span></span>
<span class="line"><span>     |        |                               |     Owner     |</span></span>
<span class="line"><span>     |        |&lt;-(B)-- Authorization Grant ---|               |</span></span>
<span class="line"><span>     |        |                               +---------------+</span></span>
<span class="line"><span>     |        |</span></span>
<span class="line"><span>     |        |                               +---------------+</span></span>
<span class="line"><span>     |        |--(C)-- Authorization Grant --&gt;| Authorization |</span></span>
<span class="line"><span>     | Client |                               |     Server    |</span></span>
<span class="line"><span>     |        |&lt;-(D)----- Access Token -------|               |</span></span>
<span class="line"><span>     |        |                               +---------------+</span></span>
<span class="line"><span>     |        |</span></span>
<span class="line"><span>     |        |                               +---------------+</span></span>
<span class="line"><span>     |        |--(E)----- Access Token ------&gt;|    Resource   |</span></span>
<span class="line"><span>     |        |                               |     Server    |</span></span>
<span class="line"><span>     |        |&lt;-(F)--- Protected Resource ---|               |</span></span>
<span class="line"><span>     +--------+                               +---------------+</span></span></code></pre></div><p>为讨论方便， 以下将获取用户授权简称为“获取code”， 将获取访问令牌（Access Token）简称为“获取Token”。</p><p>接下来分别使用GitHub和钉钉作为OAuth服务器，来解析获取code，获取token以及读取用户信息过程中的消息格式。全程不需要写代码，需要用浏览器和REST Client（POSTMAN， CURL或者Vscode的插件都可以）。</p><blockquote><p>OAUTH 客户端有两种：</p><ol><li>public：客户端本身没有能力保存密钥信息，比如桌面软件，手机App，单页面程序(SPA）。</li><li>confidential ： 通过code换取access_token这一步是在后端的api完成。一般用client_secret保护。 我们主要讨论confidential类客户端。</li></ol></blockquote><h2 id="_2-github-oauth交互解析" tabindex="-1">2. GitHub OAuth交互解析 <a class="header-anchor" href="#_2-github-oauth交互解析" aria-label="Permalink to &quot;2. GitHub OAuth交互解析&quot;">​</a></h2><p>以下四个步骤，示例了：</p><ol><li>在GitHub建立了一个新的OAuth应用，</li><li>通过GitHub提供的API获取授权吗，</li><li>通过GitHub提供的API获取token，</li><li>通过GitHub提供的API获取授权用户的数据。</li></ol><p>记录了每一步的关键输入输出参数。</p><h3 id="_2-1-创建oauth-app" tabindex="-1">2.1. 创建OAuth APP <a class="header-anchor" href="#_2-1-创建oauth-app" aria-label="Permalink to &quot;2.1. 创建OAuth APP&quot;">​</a></h3><p>登录GitHub后，在开发选项中建立一个新的OAuth APP，为测试方便，我将Redirect URL设置成了 <a href="https://www.baidu.com/" target="_blank" rel="noreferrer">https://www.baidu.com/</a>. 得到的新APP配置信息是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>client_id : 7ece5cc78e4fdd3260ae</span></span>
<span class="line"><span>client_secret: 592f6f0f19e21cd706d6bf4c4dcf6fe9a0ad099c</span></span></code></pre></div><h3 id="_2-2-获取code" tabindex="-1">2.2. 获取code <a class="header-anchor" href="#_2-2-获取code" aria-label="Permalink to &quot;2.2. 获取code&quot;">​</a></h3><p>在浏览器发起：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>https://github.com/login/oauth/authorize?client_id=7ece5cc78e4fdd3260ae&amp;redirect_uri=https://www.baidu.com/</span></span></code></pre></div><p>出现： <img src="`+e+`" alt="picture 3"></p><p>选择授权后，在回调中可以看到Code</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>https://www.baidu.com/?code=871f74a9d129ef198b43</span></span></code></pre></div><h3 id="_2-3-获取token" tabindex="-1">2.3. 获取token <a class="header-anchor" href="#_2-3-获取token" aria-label="Permalink to &quot;2.3. 获取token&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>post https://github.com/login/oauth/access_token?client_id=7ece5cc78e4fdd3260ae&amp;client_secret=592f6f0f19e21cd706d6bf4c4dcf6fe9a0ad099c&amp;code=871f74a9d129ef198b43</span></span></code></pre></div><p>上面请求有三个参数：</p><ul><li>client_id : 在GitHub创建应用得到的</li><li>client_secret : 在GitHub创建应用得到的</li><li>code : 上一步Authorization得到的</li></ul><p>得到响应中：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>access_token=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&amp;scope=&amp;token_type=bearer</span></span></code></pre></div><p>这时候登录GitHub在创建的应用配置界面，能够看到该应用已经有一个用户了。 并且我可以Revoke All user tokens。</p><h3 id="_2-4-读取用户信息" tabindex="-1">2.4. 读取用户信息 <a class="header-anchor" href="#_2-4-读取用户信息" aria-label="Permalink to &quot;2.4. 读取用户信息&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>get https://api.github.com/user</span></span>
<span class="line"><span>accept: &#39;application/json&#39;</span></span>
<span class="line"><span>Authorization: token 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</span></span></code></pre></div><p>得到响应中</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xu4wang&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">311397</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;node_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MDQ6VXNlcjMxMTM5Nw==&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;avatar_url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://avatars.githubusercontent.com/u/311397?v=4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;gravatar_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.github.com/users/xu4wang&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;html_url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://github.com/xu4wang&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;followers_url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.github.com/users/xu4wang/followers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;following_url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.github.com/users/xu4wang/following{/other_user}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;gists_url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.github.com/users/xu4wang/gists{/gist_id}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;starred_url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.github.com/users/xu4wang/starred{/owner}{/repo}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;subscriptions_url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.github.com/users/xu4wang/subscriptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;organizations_url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.github.com/users/xu4wang/orgs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;repos_url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.github.com/users/xu4wang/repos&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;events_url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.github.com/users/xu4wang/events{/privacy}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;received_events_url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.github.com/users/xu4wang/received_events&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;User&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;site_admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Austin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;company&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;blog&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://awis.me&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;location&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Shenzhen, China&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xu4wang@gmail.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;hireable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;bio&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Working @ Bangkok , Beijing and Shenzhen&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;twitter_username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;public_repos&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">26</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;public_gists&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;followers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;following&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;created_at&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2010-06-22T05:35:32Z&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;updated_at&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2022-02-25T18:51:48Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>从实现的安全性角度考虑，申请Token可以在后台和GitHub之间。 这样最终得到的Token不会在前端出现。</p><ul><li>Authorization Request 在浏览器和GitHub之间进行，得到Access Code（授权码）是GitHub Redirect过来的，浏览器会拿到。</li><li>可以将Client Secret只在后台保存，所以前端即便得到Access Code，也没办法自己调用API来从GitHub得到Token。</li></ul></blockquote><p>前端用client id请求到了该应用可以用的access code, 后端再用client secret和access code一起申请token。 通过两步申请的设计，即满足了必须用前端做用户授权的需求，又做到了token不暴露给前端，增强了安全性。</p><h2 id="_3-钉钉-oauth交互解析" tabindex="-1">3. 钉钉 OAuth交互解析 <a class="header-anchor" href="#_3-钉钉-oauth交互解析" aria-label="Permalink to &quot;3. 钉钉 OAuth交互解析&quot;">​</a></h2><p>在钉钉上，除了需要配置OAuth应用，增加两个读取个人信息的权限外，其它流程和GitHub类似。</p><h3 id="_3-1-创建oauth-app" tabindex="-1">3.1. 创建OAuth APP <a class="header-anchor" href="#_3-1-创建oauth-app" aria-label="Permalink to &quot;3.1. 创建OAuth APP&quot;">​</a></h3><p>在钉钉开发者中心，创建H5企业内部应用。并且授权它有读取个人手机号，个人通讯录信息的权限。</p><h3 id="_3-2-获取code" tabindex="-1">3.2. 获取code <a class="header-anchor" href="#_3-2-获取code" aria-label="Permalink to &quot;3.2. 获取code&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>https://login.dingtalk.com/oauth2/auth?</span></span>
<span class="line"><span>redirect_uri=https%3A%2F%2Fwww.baidu.com%2F&amp;response_type=code&amp;client_id=dingyourclientid&amp;scope=openid&amp;prompt=consent</span></span>
<span class="line"><span></span></span>
<span class="line"><span>得到</span></span>
<span class="line"><span></span></span>
<span class="line"><span>https://www.baidu.com/?authCode=6b427e8bfab83e93bedd13f16a430702</span></span></code></pre></div><p>钉钉在获取code时候，可以有一个corpId参数，用来指定是那个组织的用户。</p><h3 id="_3-3-获取token" tabindex="-1">3.3. 获取token <a class="header-anchor" href="#_3-3-获取token" aria-label="Permalink to &quot;3.3. 获取token&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">POST https:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//api.dingtalk.com/v1.0/oauth2/userAccessToken </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Content-Type:application/json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;clientId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ding your id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;clientSecret&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;your secret&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;code&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;6b427e8bfab83e93bedd13f16a430702&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;grantType&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;authorization_code&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">得到：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;expireIn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;accessToken&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a8f4e3215a703ce9a7164e91dbab53c0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;refreshToken&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b13e5a61b421342d95d86c9e64c275c6&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-4-读取用户信息" tabindex="-1">3.4. 读取用户信息 <a class="header-anchor" href="#_3-4-读取用户信息" aria-label="Permalink to &quot;3.4. 读取用户信息&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GET https:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//api.dingtalk.com/v1.0/contact/users/me </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x-acs-dingtalk-access-token:a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4e3215</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">703</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ce</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7164e91</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dbab</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">53</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Content-Type:application/json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">得到：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;nick&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AWIS ME&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;unionId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;D578iS5hxxxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;avatarUrl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://static-legacy.dingtalk.com/media/lADPGT5i9m5ZyXDNA4LNAtA_720.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;openId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;WySPOpXqxE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;mobile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1350xxxxxxxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;stateCode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;86&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxxu@xxx.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-5-关于和标准的兼容性" tabindex="-1">3.5. 关于和标准的兼容性 <a class="header-anchor" href="#_3-5-关于和标准的兼容性" aria-label="Permalink to &quot;3.5. 关于和标准的兼容性&quot;">​</a></h3><p>钉钉的OAuth 2实现中， 其很多参数名称和RFC6749中的定义不一致。 例如code在钉钉中叫做authCode，client_id在钉钉中叫做clientId，grant_type被重命名为grantType，... 和标准不兼容会导致通用的OAuth库（例如openid-client）无法直接和钉钉互通。这种不兼容的协议设计导致软件无法重用，社会资源浪费，应该被鄙视。</p><h2 id="_4-pkce" tabindex="-1">4. PKCE <a class="header-anchor" href="#_4-pkce" aria-label="Permalink to &quot;4. PKCE&quot;">​</a></h2><blockquote><p>OAuth 2.0 public clients utilizing the Authorization Code Grant are susceptible to the authorization code interception attack. This specification describes the attack as well as a technique to mitigate against the threat through the use of Proof Key for Code Exchange (PKCE, pronounced &quot;pixy&quot;).</p></blockquote><p>PKCE 是OAUTH2的一个扩展， 其本意是解决public client（例如浏览器或者app应用）的安全性问题。 但后来对于我们上面描述的confidential类客户端也推荐使用。</p><p>其基本原理是在第一步获取code时候, 额外多传给auth server两个参数：</p><ol><li>code challenge</li><li>code challenge method</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Provider + /oauth/redirect?</span></span>
<span class="line"><span>client_id={client_id}</span></span>
<span class="line"><span>&amp;redirect_uri={Callback URL}</span></span>
<span class="line"><span>&amp;scope={Scope}</span></span>
<span class="line"><span>&amp;response_type=code</span></span>
<span class="line"><span>&amp;state={random long string}</span></span>
<span class="line"><span>&amp;code_challenge={code challenge}</span></span>
<span class="line"><span>&amp;code_challenge_method=SHA256</span></span></code></pre></div><p>其中，</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>code challenge = code_challenge_method (code verifier)</span></span></code></pre></div><p>而code verifier是一个随机串。</p><p>服务器在收到请求后，会保存 code challenge和 code_challenge_method， 然后发放code。</p><p>接下来， 用code换取token时候， 客户端把 code verifier 和code一起给服务器。 这样服务器就可以验证换取token的这个客户端和最初申请code的客户端是不是一个。</p><p>这样，就算恶意程序拦截到了授权码code，但是没有code_verifier，也是不能获取访问令牌的。</p><blockquote><p>PKCE也可以用在机密（confidential）的客户端，那就是client_secret + code_verifier双重密钥了。</p></blockquote><p>如果OAUTH2只有client_secret而没有PKCE，也存在<a href="https://condatis.com/news/blog/oauth-confidential-clients/" target="_blank" rel="noreferrer">用户身份被冒名顶替的风险</a>。</p><p>攻击的原理是第三方使用浏览器插件，获取到code之后，让受害者的OAuth流程失败， 同时用盗窃的code来顶替受害者登录。 如果有了PKCE，受害者浏览器有code_verifier， code_verifier不会和code同时失窃（在获取token之前不会在网络上传输）， 所以攻击者拿到code也无法直接通过API服务器来冒充受害者。</p><h2 id="_5-参考" tabindex="-1">5. 参考 <a class="header-anchor" href="#_5-参考" aria-label="Permalink to &quot;5. 参考&quot;">​</a></h2><ul><li><a href="http://www.ruanyifeng.com/blog/2019/04/oauth_design.html" target="_blank" rel="noreferrer">OAuth 2 协议介绍</a></li><li><a href="https://www.ietf.org/rfc/rfc6750.txt" target="_blank" rel="noreferrer">RFC6750 OAuth 2 Framework Bearer Token Usage</a></li><li><a href="https://www.ietf.org/rfc/rfc6749.txt" target="_blank" rel="noreferrer">RFC6749 OAuth 2 Framework</a></li><li><a href="https://open.dingtalk.com/document/orgapp-server/tutorial-obtaining-user-personal-information" target="_blank" rel="noreferrer">钉钉文档</a></li><li><a href="https://datatracker.ietf.org/doc/html/rfc7636" target="_blank" rel="noreferrer">https://datatracker.ietf.org/doc/html/rfc7636</a></li></ul>`,73),h=[l];function k(o,r,d,c,u,E){return i(),a("div",null,h)}const F=s(p,[["render",k]]);export{y as __pageData,F as default};
